(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[19],{"7Fir":function(n,t,o){"use strict";o.r(t),t.default='---\ntitle: "Associative array"\ndate: "2020-09-21"\nog:\n  description: "Use associative array to clean up your code."\n  image: "https://telmo.im/og/too-many-states.png"\nauthor:\n  twitter: "telmo"\n  name: "Telmo Goncalves"\n---\n\nAs the months pass by the more I know about React, in this article I just want to go through a *trick* I use when a component starts to get a little confusing with conditionals. Let us take a look at a simple dummy few functions to run a `console.log`:\n\n```javascript\nfunction start() {\n  console.log("Starting...");\n}\nfunction pause() {\n  console.log("Pausing...");\n}\nfunction stop() {\n  console.log("Stopping!");\n}\n```\n\nAlright, if we call each function we should get a console log with the respective content:\n\n```js\nstart(); // Starting...\npause(); // Pausing...\nstop(); // Stopping!\n```\n\nLooking good!\n\n> These are simple functions, if you\'re writing complex functions I don\'t advice using what we\'re about to use in this article.\n---\n\n# Array array array\n\nSince these are simple functions we can use an array to use the functions instead of having individual functions, such as:\n\n```js\nconst actions = {\n  start: () => console.log("Starting..."),\n  pause: () => console.log("Pausing..."),\n  stop: () => console.log("Stopping!")\n}\n```\n\nNow we can call it by using:\n\n```js\nactions["pause"](); // Pausing...\n```\n\nWe still go a little further and make sure our action names are always the same by creating an object with it:\n\n```js\nconst actionNames = {\n  START: "start",\n  PAUSE: "pause",\n  STOP: "stop"\n}\n```\n\nLet us change our `actions` array to make sure it reflects with our brand new `actionNames`:\n\n```js\nconst actions = {\n  [actionNames.START]: () => console.log("Starting..."),\n  [actionNames.PAUSE]: () => console.log("Pausing..."),\n  [actionNames.STOP]: () => console.log("Stopping!")\n}\n```\n\nNow instead of calling `actions["stop"]();` we can use our `actionNames`:\n\n```js\nactions[actionNames.STOP](); // Stopping!\n```\n\n---\n\n# Without functions\n\nLet me give you one more examples, say we want to display an online presence, it can either be **online**, **offline** or away, both content and background should change, we can also use an associative array to accomplish that, take a look:\n\n```js\nconst status = {\n  ONLINE: {\n    background: "#09ded8",\n    title: "User is online \ud83c\udf89"\n  },\n  OFFLINE: {\n    background: "#fe564c",\n    title: "Oh bummer, user is offline \ud83d\ude14"\n  },\n  AWAY: {\n    background: "#fac82b",\n    title: "User is away, should be right back \ud83d\udc40"\n  }\n}\n```\n\nAs an example if you call `status["ONLINE"]` you\'ll get the following in return:\n\n```js\n{\n  background: "#09ded8",\n  title: "User is online \ud83c\udf89"\n}\n```\n\nThat\'s it! You can play around with the code [here](https://codesandbox.io/s/silly-dhawan-c5qpz?file=/src/index.js)'}}]);