(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[5],{

/***/ "./writings/destructure-everything.md":
/*!********************************************!*\
  !*** ./writings/destructure-everything.md ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\ntitle: \"Destructure Everything\"\ndate: \"2020-01-08\"\nauthor:\n  twitter: \"telmo\"\n  name: \"Telmo Goncalves\"\n---\n\nDestructuring is a convenient way of extracting multiple values\nfrom data stored in objects and Arrays.\n\n---\n\nLet's take a look on how to destructure an object:\n\n```js\nconst info = { name: 'Telmo', age: 33, twitterHandler: '@telmo' }\n\n// Destructure data from `info`\nconst { name, age, twitterHandler } = info\n\nconsole.log(name, age, twitterHandler) // Telmo 33 @telmo\n```\n\nWhat we've done here? Instead of accessing the data through `info.name`, `info.age`, etc;\nWe extracted the data from `info`, this way you prevent calling `info.X` multiple times.\n\n<br />\n\nLet's mock an example where you're making an API call, for this we'll be using\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/), you can take a look to figure\nout what it does.\n\n<br />\n\nA straight forward example is the one provided in the homepage, where we can fetch data\nfrom [here](https://jsonplaceholder.typicode.com/todos/1) and it should return something like:\n\n```json\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}\n```\n\nLet's build a simple component so we can then extract the data from the API call:\n\n```js\nimport React from 'react'\n\nexport default function MyComponent() {\n  return (\n    <div>My amazing component ðŸš€</div>\n  )\n}\n```\n\n<br />\n\nGreat, now let's assume the data from the API call is being passed to the component\nthrough `props`, we can either extract the data before we `return` our component:\n\n```js:!-3,4,7-12\nimport React from 'react'\n\nexport default function MyComponent(props) {\n  const { userId, id, title, completed } = props\n\n  return (\n    <div>\n      Task ID: {id}\n      Created by user ID: {userId}\n      Task title: {title}\n      Completed: {completed}\n    </div>\n  )\n}\n```\n\nLooks great, but we can still save at least one least in your code, take a look:\n\n```js:!-3,-4\nimport React from 'react'\n\nexport default function MyComponent({ userId, id, title, completed }) {\n  const { userId, id, title, completed } = props\n\n  return (\n    <div>\n      Task ID: {id}\n      Created by user ID: {userId}\n      Task title: {title}\n      Completed: {completed}\n    </div>\n  )\n}\n```\n\nBy extracting the data directly on `MyComponent()`, we no longer need\nto extract the data through `const { ... } = props`.\n\n---\n\n## Let's play without brackets (Arrays)\n\nCheck the example bellow and notice the comments:\n\n```js\nconst myTags = ['React', 'Next', 'Gatsby']\n\n// Get first element of the array\nconsole.log(myTags[0]) // React\n\n// Destructuring the array\nconst [tag] = myTags\n\nconsole.log(tag) // React\n```\n\nLooks way better.\n\n<br />\n\nGoing a little further, I found out about this just a few days ago, and it's\namazing how good the code looks using this. Let's imagine the following data structure:\n\n```json\n\"deliveries\": [\n  {\n    \"id\": 337948,\n    \"shipments\": [\n      {\n        \"number\": \"FOO-5905959044\",\n        \"products\": [\n          {\n            \"title\": \"Apple Pie\"\n          },\n          {\n            \"title\": \"6 Pack Coronas\"\n          },\n          {\n            \"title\": \"Doritos\"\n          },\n          {\n            \"title\": \"Burgers\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\nLet's destructure this sucker using the same component as before,\nassuming this data is being passed to the component `props`:\n\n```js\n // Destructuring happening right here within `MyComponent()`\nexport default function MyComponent({\n  data: { deliveries }\n}) {\n  return (\n    deliveries.map(delivery => {\n      const {\n        id,\n         // Beauty of destructuring arrays\n        shipments: [shipment]\n      } = delivery\n      // Destructuring data from the first array of `shipments`\n      const { number, products } = shipment\n\n      return (\n        <div>\n          Order with ID {id} and tracking shipment\n          number {number}\n\n          <ul>\n            {products.map(({ title }) => ( // Destructuring happening here within `()`\n              <li>{title}</li>\n            ))}\n          </ul>\n        </div>\n      )\n    })\n  )\n}\n```\n\nYou can check [this CodeSandbox](https://codesandbox.io/s/infallible-wilbur-xo90i) I've put together.\n");

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvZGVzdHJ1Y3R1cmUtZXZlcnl0aGluZy5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBZSwrWEFBZ1UsbURBQW1ELDRDQUE0Qyw0QkFBNEIsc0tBQXNLLHFmQUFxZixpR0FBaUcseUtBQXlLLDREQUE0RCx3UkFBd1IsV0FBVywrQkFBK0IsbURBQW1ELEdBQUcsNkJBQTZCLE9BQU8scUJBQXFCLE1BQU0sb0JBQW9CLFVBQVUsb0JBQW9CLDZLQUE2SywrQkFBK0IsR0FBRyxXQUFXLCtCQUErQixtREFBbUQsR0FBRyw2QkFBNkIsT0FBTyxxQkFBcUIsTUFBTSxvQkFBb0IsVUFBVSxvQkFBb0Isb0hBQW9ILE1BQU0sNmlCQUE2aUIsb0RBQW9ELCtFQUErRSxtREFBbUQsY0FBYyx3REFBd0QsY0FBYyxpREFBaUQsY0FBYyxpREFBaUQsb0JBQW9CLFlBQVksMFBBQTBQLFdBQVcsYUFBYSxHQUFHLEdBQUcsOENBQThDLGVBQWUsaUdBQWlHLDJGQUEyRixtQkFBbUIsdUVBQXVFLEdBQUcsMENBQTBDLE9BQU8saUNBQWlDLGVBQWUsUUFBUSx1RUFBdUUsTUFBTSxzQkFBc0IsaURBQWlELFNBQVMsaUhBQWlILEUiLCJmaWxlIjoic3RhdGljL2NodW5rcy81LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCItLS1cXG50aXRsZTogXFxcIkRlc3RydWN0dXJlIEV2ZXJ5dGhpbmdcXFwiXFxuZGF0ZTogXFxcIjIwMjAtMDEtMDhcXFwiXFxuYXV0aG9yOlxcbiAgdHdpdHRlcjogXFxcInRlbG1vXFxcIlxcbiAgbmFtZTogXFxcIlRlbG1vIEdvbmNhbHZlc1xcXCJcXG4tLS1cXG5cXG5EZXN0cnVjdHVyaW5nIGlzIGEgY29udmVuaWVudCB3YXkgb2YgZXh0cmFjdGluZyBtdWx0aXBsZSB2YWx1ZXNcXG5mcm9tIGRhdGEgc3RvcmVkIGluIG9iamVjdHMgYW5kIEFycmF5cy5cXG5cXG4tLS1cXG5cXG5MZXQncyB0YWtlIGEgbG9vayBvbiBob3cgdG8gZGVzdHJ1Y3R1cmUgYW4gb2JqZWN0OlxcblxcbmBgYGpzXFxuY29uc3QgaW5mbyA9IHsgbmFtZTogJ1RlbG1vJywgYWdlOiAzMywgdHdpdHRlckhhbmRsZXI6ICdAdGVsbW8nIH1cXG5cXG4vLyBEZXN0cnVjdHVyZSBkYXRhIGZyb20gYGluZm9gXFxuY29uc3QgeyBuYW1lLCBhZ2UsIHR3aXR0ZXJIYW5kbGVyIH0gPSBpbmZvXFxuXFxuY29uc29sZS5sb2cobmFtZSwgYWdlLCB0d2l0dGVySGFuZGxlcikgLy8gVGVsbW8gMzMgQHRlbG1vXFxuYGBgXFxuXFxuV2hhdCB3ZSd2ZSBkb25lIGhlcmU/IEluc3RlYWQgb2YgYWNjZXNzaW5nIHRoZSBkYXRhIHRocm91Z2ggYGluZm8ubmFtZWAsIGBpbmZvLmFnZWAsIGV0YztcXG5XZSBleHRyYWN0ZWQgdGhlIGRhdGEgZnJvbSBgaW5mb2AsIHRoaXMgd2F5IHlvdSBwcmV2ZW50IGNhbGxpbmcgYGluZm8uWGAgbXVsdGlwbGUgdGltZXMuXFxuXFxuPGJyIC8+XFxuXFxuTGV0J3MgbW9jayBhbiBleGFtcGxlIHdoZXJlIHlvdSdyZSBtYWtpbmcgYW4gQVBJIGNhbGwsIGZvciB0aGlzIHdlJ2xsIGJlIHVzaW5nXFxuW0pTT05QbGFjZWhvbGRlcl0oaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tLyksIHlvdSBjYW4gdGFrZSBhIGxvb2sgdG8gZmlndXJlXFxub3V0IHdoYXQgaXQgZG9lcy5cXG5cXG48YnIgLz5cXG5cXG5BIHN0cmFpZ2h0IGZvcndhcmQgZXhhbXBsZSBpcyB0aGUgb25lIHByb3ZpZGVkIGluIHRoZSBob21lcGFnZSwgd2hlcmUgd2UgY2FuIGZldGNoIGRhdGFcXG5mcm9tIFtoZXJlXShodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdG9kb3MvMSkgYW5kIGl0IHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGxpa2U6XFxuXFxuYGBganNvblxcbntcXG4gIFxcXCJ1c2VySWRcXFwiOiAxLFxcbiAgXFxcImlkXFxcIjogMSxcXG4gIFxcXCJ0aXRsZVxcXCI6IFxcXCJkZWxlY3R1cyBhdXQgYXV0ZW1cXFwiLFxcbiAgXFxcImNvbXBsZXRlZFxcXCI6IGZhbHNlXFxufVxcbmBgYFxcblxcbkxldCdzIGJ1aWxkIGEgc2ltcGxlIGNvbXBvbmVudCBzbyB3ZSBjYW4gdGhlbiBleHRyYWN0IHRoZSBkYXRhIGZyb20gdGhlIEFQSSBjYWxsOlxcblxcbmBgYGpzXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE15Q29tcG9uZW50KCkge1xcbiAgcmV0dXJuIChcXG4gICAgPGRpdj5NeSBhbWF6aW5nIGNvbXBvbmVudCDwn5qAPC9kaXY+XFxuICApXFxufVxcbmBgYFxcblxcbjxiciAvPlxcblxcbkdyZWF0LCBub3cgbGV0J3MgYXNzdW1lIHRoZSBkYXRhIGZyb20gdGhlIEFQSSBjYWxsIGlzIGJlaW5nIHBhc3NlZCB0byB0aGUgY29tcG9uZW50XFxudGhyb3VnaCBgcHJvcHNgLCB3ZSBjYW4gZWl0aGVyIGV4dHJhY3QgdGhlIGRhdGEgYmVmb3JlIHdlIGByZXR1cm5gIG91ciBjb21wb25lbnQ6XFxuXFxuYGBganM6IS0zLDQsNy0xMlxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcXG5cXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNeUNvbXBvbmVudChwcm9wcykge1xcbiAgY29uc3QgeyB1c2VySWQsIGlkLCB0aXRsZSwgY29tcGxldGVkIH0gPSBwcm9wc1xcblxcbiAgcmV0dXJuIChcXG4gICAgPGRpdj5cXG4gICAgICBUYXNrIElEOiB7aWR9XFxuICAgICAgQ3JlYXRlZCBieSB1c2VyIElEOiB7dXNlcklkfVxcbiAgICAgIFRhc2sgdGl0bGU6IHt0aXRsZX1cXG4gICAgICBDb21wbGV0ZWQ6IHtjb21wbGV0ZWR9XFxuICAgIDwvZGl2PlxcbiAgKVxcbn1cXG5gYGBcXG5cXG5Mb29rcyBncmVhdCwgYnV0IHdlIGNhbiBzdGlsbCBzYXZlIGF0IGxlYXN0IG9uZSBsZWFzdCBpbiB5b3VyIGNvZGUsIHRha2UgYSBsb29rOlxcblxcbmBgYGpzOiEtMywtNFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcXG5cXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNeUNvbXBvbmVudCh7IHVzZXJJZCwgaWQsIHRpdGxlLCBjb21wbGV0ZWQgfSkge1xcbiAgY29uc3QgeyB1c2VySWQsIGlkLCB0aXRsZSwgY29tcGxldGVkIH0gPSBwcm9wc1xcblxcbiAgcmV0dXJuIChcXG4gICAgPGRpdj5cXG4gICAgICBUYXNrIElEOiB7aWR9XFxuICAgICAgQ3JlYXRlZCBieSB1c2VyIElEOiB7dXNlcklkfVxcbiAgICAgIFRhc2sgdGl0bGU6IHt0aXRsZX1cXG4gICAgICBDb21wbGV0ZWQ6IHtjb21wbGV0ZWR9XFxuICAgIDwvZGl2PlxcbiAgKVxcbn1cXG5gYGBcXG5cXG5CeSBleHRyYWN0aW5nIHRoZSBkYXRhIGRpcmVjdGx5IG9uIGBNeUNvbXBvbmVudCgpYCwgd2Ugbm8gbG9uZ2VyIG5lZWRcXG50byBleHRyYWN0IHRoZSBkYXRhIHRocm91Z2ggYGNvbnN0IHsgLi4uIH0gPSBwcm9wc2AuXFxuXFxuLS0tXFxuXFxuIyMgTGV0J3MgcGxheSB3aXRob3V0IGJyYWNrZXRzIChBcnJheXMpXFxuXFxuQ2hlY2sgdGhlIGV4YW1wbGUgYmVsbG93IGFuZCBub3RpY2UgdGhlIGNvbW1lbnRzOlxcblxcbmBgYGpzXFxuY29uc3QgbXlUYWdzID0gWydSZWFjdCcsICdOZXh0JywgJ0dhdHNieSddXFxuXFxuLy8gR2V0IGZpcnN0IGVsZW1lbnQgb2YgdGhlIGFycmF5XFxuY29uc29sZS5sb2cobXlUYWdzWzBdKSAvLyBSZWFjdFxcblxcbi8vIERlc3RydWN0dXJpbmcgdGhlIGFycmF5XFxuY29uc3QgW3RhZ10gPSBteVRhZ3NcXG5cXG5jb25zb2xlLmxvZyh0YWcpIC8vIFJlYWN0XFxuYGBgXFxuXFxuTG9va3Mgd2F5IGJldHRlci5cXG5cXG48YnIgLz5cXG5cXG5Hb2luZyBhIGxpdHRsZSBmdXJ0aGVyLCBJIGZvdW5kIG91dCBhYm91dCB0aGlzIGp1c3QgYSBmZXcgZGF5cyBhZ28sIGFuZCBpdCdzXFxuYW1hemluZyBob3cgZ29vZCB0aGUgY29kZSBsb29rcyB1c2luZyB0aGlzLiBMZXQncyBpbWFnaW5lIHRoZSBmb2xsb3dpbmcgZGF0YSBzdHJ1Y3R1cmU6XFxuXFxuYGBganNvblxcblxcXCJkZWxpdmVyaWVzXFxcIjogW1xcbiAge1xcbiAgICBcXFwiaWRcXFwiOiAzMzc5NDgsXFxuICAgIFxcXCJzaGlwbWVudHNcXFwiOiBbXFxuICAgICAge1xcbiAgICAgICAgXFxcIm51bWJlclxcXCI6IFxcXCJGT08tNTkwNTk1OTA0NFxcXCIsXFxuICAgICAgICBcXFwicHJvZHVjdHNcXFwiOiBbXFxuICAgICAgICAgIHtcXG4gICAgICAgICAgICBcXFwidGl0bGVcXFwiOiBcXFwiQXBwbGUgUGllXFxcIlxcbiAgICAgICAgICB9LFxcbiAgICAgICAgICB7XFxuICAgICAgICAgICAgXFxcInRpdGxlXFxcIjogXFxcIjYgUGFjayBDb3JvbmFzXFxcIlxcbiAgICAgICAgICB9LFxcbiAgICAgICAgICB7XFxuICAgICAgICAgICAgXFxcInRpdGxlXFxcIjogXFxcIkRvcml0b3NcXFwiXFxuICAgICAgICAgIH0sXFxuICAgICAgICAgIHtcXG4gICAgICAgICAgICBcXFwidGl0bGVcXFwiOiBcXFwiQnVyZ2Vyc1xcXCJcXG4gICAgICAgICAgfVxcbiAgICAgICAgXVxcbiAgICAgIH1cXG4gICAgXVxcbiAgfVxcbl1cXG5gYGBcXG5cXG5MZXQncyBkZXN0cnVjdHVyZSB0aGlzIHN1Y2tlciB1c2luZyB0aGUgc2FtZSBjb21wb25lbnQgYXMgYmVmb3JlLFxcbmFzc3VtaW5nIHRoaXMgZGF0YSBpcyBiZWluZyBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudCBgcHJvcHNgOlxcblxcbmBgYGpzXFxuIC8vIERlc3RydWN0dXJpbmcgaGFwcGVuaW5nIHJpZ2h0IGhlcmUgd2l0aGluIGBNeUNvbXBvbmVudCgpYFxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE15Q29tcG9uZW50KHtcXG4gIGRhdGE6IHsgZGVsaXZlcmllcyB9XFxufSkge1xcbiAgcmV0dXJuIChcXG4gICAgZGVsaXZlcmllcy5tYXAoZGVsaXZlcnkgPT4ge1xcbiAgICAgIGNvbnN0IHtcXG4gICAgICAgIGlkLFxcbiAgICAgICAgIC8vIEJlYXV0eSBvZiBkZXN0cnVjdHVyaW5nIGFycmF5c1xcbiAgICAgICAgc2hpcG1lbnRzOiBbc2hpcG1lbnRdXFxuICAgICAgfSA9IGRlbGl2ZXJ5XFxuICAgICAgLy8gRGVzdHJ1Y3R1cmluZyBkYXRhIGZyb20gdGhlIGZpcnN0IGFycmF5IG9mIGBzaGlwbWVudHNgXFxuICAgICAgY29uc3QgeyBudW1iZXIsIHByb2R1Y3RzIH0gPSBzaGlwbWVudFxcblxcbiAgICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2PlxcbiAgICAgICAgICBPcmRlciB3aXRoIElEIHtpZH0gYW5kIHRyYWNraW5nIHNoaXBtZW50XFxuICAgICAgICAgIG51bWJlciB7bnVtYmVyfVxcblxcbiAgICAgICAgICA8dWw+XFxuICAgICAgICAgICAge3Byb2R1Y3RzLm1hcCgoeyB0aXRsZSB9KSA9PiAoIC8vIERlc3RydWN0dXJpbmcgaGFwcGVuaW5nIGhlcmUgd2l0aGluIGAoKWBcXG4gICAgICAgICAgICAgIDxsaT57dGl0bGV9PC9saT5cXG4gICAgICAgICAgICApKX1cXG4gICAgICAgICAgPC91bD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIClcXG4gICAgfSlcXG4gIClcXG59XFxuYGBgXFxuXFxuWW91IGNhbiBjaGVjayBbdGhpcyBDb2RlU2FuZGJveF0oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2luZmFsbGlibGUtd2lsYnVyLXhvOTBpKSBJJ3ZlIHB1dCB0b2dldGhlci5cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9